"use strict";(globalThis.webpackChunkcoo_llm_docs=globalThis.webpackChunkcoo_llm_docs||[]).push([[9172],{272:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>g,frontMatter:()=>l,metadata:()=>t,toc:()=>a});const t=JSON.parse('{"id":"Developer-Guide/Testing","title":"Testing","description":"Testing guide for COO-LLM development.","source":"@site/content/Developer-Guide/Testing.md","sourceDirName":"Developer-Guide","slug":"/Developer-Guide/Testing","permalink":"/docs/docs/Developer-Guide/Testing","draft":false,"unlisted":false,"editUrl":"https://github.com/coo-llm/coo-llm-main/tree/main/docs/content/content/Developer-Guide/Testing.md","tags":[{"inline":true,"label":"developer-guide","permalink":"/docs/docs/tags/developer-guide"},{"inline":true,"label":"testing","permalink":"/docs/docs/tags/testing"}],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5,"tags":["developer-guide","testing"]},"sidebar":"tutorialSidebar","previous":{"title":"Prometheus Metrics","permalink":"/docs/docs/Reference/Logging/Prometheus"},"next":{"title":"Contributing","permalink":"/docs/docs/Contributing/Guidelines"}}');var i=s(4848),r=s(8453);const l={sidebar_position:5,tags:["developer-guide","testing"]},o="Testing",c={},a=[{value:"Running Tests",id:"running-tests",level:2},{value:"Unit Tests",id:"unit-tests",level:3},{value:"Integration Tests",id:"integration-tests",level:3},{value:"Web UI Tests",id:"web-ui-tests",level:3},{value:"Test Structure",id:"test-structure",level:2},{value:"Unit Tests",id:"unit-tests-1",level:3},{value:"Test Categories",id:"test-categories",level:3},{value:"Writing Tests",id:"writing-tests",level:2},{value:"Basic Unit Test",id:"basic-unit-test",level:3},{value:"Table-Driven Tests",id:"table-driven-tests",level:3},{value:"Mocking Dependencies",id:"mocking-dependencies",level:3},{value:"Test Coverage",id:"test-coverage",level:2},{value:"Generate Coverage Report",id:"generate-coverage-report",level:3},{value:"Coverage Goals",id:"coverage-goals",level:3},{value:"CI/CD Testing",id:"cicd-testing",level:2},{value:"GitHub Actions Workflow",id:"github-actions-workflow",level:3},{value:"Pre-commit Hooks",id:"pre-commit-hooks",level:3},{value:"Performance Testing",id:"performance-testing",level:2},{value:"Load Testing with Vegeta",id:"load-testing-with-vegeta",level:3},{value:"Benchmark Tests",id:"benchmark-tests",level:3},{value:"Debugging Tests",id:"debugging-tests",level:2},{value:"Verbose Output",id:"verbose-output",level:3},{value:"Debug Logging",id:"debug-logging",level:3},{value:"Test Timeouts",id:"test-timeouts",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Test Organization",id:"test-organization",level:3},{value:"Mocking",id:"mocking",level:3},{value:"CI Best Practices",id:"ci-best-practices",level:3},{value:"Contributing Tests",id:"contributing-tests",level:2},{value:"Troubleshooting Test Issues",id:"troubleshooting-test-issues",level:2},{value:"Flaky Tests",id:"flaky-tests",level:3},{value:"Common Errors",id:"common-errors",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"testing",children:"Testing"})}),"\n",(0,i.jsx)(n.p,{children:"Testing guide for COO-LLM development."}),"\n",(0,i.jsx)(n.h2,{id:"running-tests",children:"Running Tests"}),"\n",(0,i.jsx)(n.h3,{id:"unit-tests",children:"Unit Tests"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Run all tests\ngo test ./...\n\n# Run specific package\ngo test ./internal/config\n\n# Run with verbose output\ngo test -v ./internal/balancer\n\n# Run with race detection\ngo test -race ./...\n"})}),"\n",(0,i.jsx)(n.h3,{id:"integration-tests",children:"Integration Tests"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Run e2e tests (requires running server)\ngo test -tags=e2e ./test\n\n# With environment setup\nexport COO_TEST_MODE=true\ngo test -tags=e2e ./test\n"})}),"\n",(0,i.jsx)(n.h3,{id:"web-ui-tests",children:"Web UI Tests"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"cd webui\nnpm test\n\n# With coverage\nnpm test -- --coverage\n"})}),"\n",(0,i.jsx)(n.h2,{id:"test-structure",children:"Test Structure"}),"\n",(0,i.jsx)(n.h3,{id:"unit-tests-1",children:"Unit Tests"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Config"}),": ",(0,i.jsx)(n.code,{children:"internal/config/config_test.go"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Balancer"}),": ",(0,i.jsx)(n.code,{children:"internal/balancer/selector_test.go"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"API"}),": ",(0,i.jsx)(n.code,{children:"internal/api/*_test.go"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Providers"}),": ",(0,i.jsx)(n.code,{children:"internal/provider/*_test.go"})]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"test-categories",children:"Test Categories"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Unit tests"}),": Test individual functions/components"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Integration tests"}),": Test component interactions"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"E2E tests"}),": Full request flow testing"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"writing-tests",children:"Writing Tests"}),"\n",(0,i.jsx)(n.h3,{id:"basic-unit-test",children:"Basic Unit Test"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'func TestConfigValidation(t *testing.T) {\n    cfg := &config.Config{\n        Version: "1.0",\n        Server: config.Server{\n            Listen: ":2906",\n            AdminAPIKey: "test-key",\n        },\n    }\n\n    err := config.ValidateConfig(cfg)\n    assert.NoError(t, err)\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"table-driven-tests",children:"Table-Driven Tests"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'func TestSelectorAlgorithm(t *testing.T) {\n    tests := []struct {\n        name     string\n        cfg      *config.Config\n        expected string\n    }{\n        {\n            name: "round_robin",\n            cfg: &config.Config{\n                Policy: config.Policy{Algorithm: "round_robin"},\n            },\n            expected: "key1",\n        },\n        {\n            name: "least_loaded",\n            cfg: &config.Config{\n                Policy: config.Policy{Algorithm: "least_loaded"},\n            },\n            expected: "key2",\n        },\n    }\n\n    for _, tt := range tests {\n        t.Run(tt.name, func(t *testing.T) {\n            // Test implementation\n        })\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"mocking-dependencies",children:"Mocking Dependencies"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'type mockStore struct {\n    data map[string]float64\n}\n\nfunc (m *mockStore) GetUsage(provider, key, metric string) (float64, error) {\n    return m.data[fmt.Sprintf("%s:%s:%s", provider, key, metric)], nil\n}\n\nfunc TestCalculateScore(t *testing.T) {\n    store := &mockStore{\n        data: map[string]float64{\n            "openai:key1:req": 10,\n        },\n    }\n\n    selector := balancer.NewSelector(&config.Config{}, store)\n    // Test scoring logic\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"test-coverage",children:"Test Coverage"}),"\n",(0,i.jsx)(n.h3,{id:"generate-coverage-report",children:"Generate Coverage Report"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# HTML report\ngo test -coverprofile=coverage.out ./...\ngo tool cover -html=coverage.out -o coverage.html\n\n# Text summary\ngo test -cover ./...\n"})}),"\n",(0,i.jsx)(n.h3,{id:"coverage-goals",children:"Coverage Goals"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Unit tests"}),": >80% coverage"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Critical paths"}),": 100% coverage (auth, balancing, rate limiting)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Integration"}),": Key user flows covered"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"cicd-testing",children:"CI/CD Testing"}),"\n",(0,i.jsx)(n.h3,{id:"github-actions-workflow",children:"GitHub Actions Workflow"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"# .github/workflows/ci.yml\nname: CI\non: [push, pull_request]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-go@v4\n        with:\n          go-version: '1.21'\n      - run: go test -race -cover ./...\n      - run: go build ./cmd/coo-llm\n"})}),"\n",(0,i.jsx)(n.h3,{id:"pre-commit-hooks",children:"Pre-commit Hooks"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Install pre-commit\npip install pre-commit\n\n# Run hooks\npre-commit run --all-files\n"})}),"\n",(0,i.jsx)(n.h2,{id:"performance-testing",children:"Performance Testing"}),"\n",(0,i.jsx)(n.h3,{id:"load-testing-with-vegeta",children:"Load Testing with Vegeta"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'echo "POST http://localhost:2906/api/v1/chat/completions\nAuthorization: Bearer test-key\nContent-Type: application/json\n\n{\n  \\"model\\": \\"openai:gpt-4o\\",\n  \\"messages\\": [{\\"role\\": \\"user\\", \\"content\\": \\"Hello\\"}]\n}" | vegeta attack -rate=10 -duration=30s | vegeta report\n'})}),"\n",(0,i.jsx)(n.h3,{id:"benchmark-tests",children:"Benchmark Tests"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"func BenchmarkChatCompletion(b *testing.B) {\n    // Setup\n    cfg := &config.Config{ /* ... */ }\n    selector := balancer.NewSelector(cfg, store)\n\n    b.ResetTimer()\n    for i := 0; i < b.N; i++ {\n        // Benchmark code\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"debugging-tests",children:"Debugging Tests"}),"\n",(0,i.jsx)(n.h3,{id:"verbose-output",children:"Verbose Output"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"go test -v -run TestSpecificFunction\n"})}),"\n",(0,i.jsx)(n.h3,{id:"debug-logging",children:"Debug Logging"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'// In test\nt.Logf("Debug info: %+v", variable)\n\n// Enable debug logs\nos.Setenv("LOG_LEVEL", "debug")\n'})}),"\n",(0,i.jsx)(n.h3,{id:"test-timeouts",children:"Test Timeouts"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'func TestSlowOperation(t *testing.T) {\n    if testing.Short() {\n        t.Skip("Skipping slow test in short mode")\n    }\n\n    done := make(chan bool)\n    go func() {\n        // Slow operation\n        done <- true\n    }()\n\n    select {\n    case <-done:\n        // Success\n    case <-time.After(30 * time.Second):\n        t.Fatal("Test timed out")\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,i.jsx)(n.h3,{id:"test-organization",children:"Test Organization"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"One assertion per test"}),": Keep tests focused"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Descriptive names"}),": ",(0,i.jsx)(n.code,{children:"TestCalculateScore_EmptyWeights"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Cleanup"}),": Use ",(0,i.jsx)(n.code,{children:"t.Cleanup()"})," for resource cleanup"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Parallel tests"}),": Use ",(0,i.jsx)(n.code,{children:"t.Parallel()"})," when safe"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"mocking",children:"Mocking"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Interface-based"}),": Mock via interfaces, not concrete types"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Minimal mocks"}),": Only mock what's necessary"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Real dependencies"}),": Use real DB for integration tests"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"ci-best-practices",children:"CI Best Practices"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Fast feedback"}),": Run unit tests first"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Fail fast"}),": Stop on first failure in CI"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Cache dependencies"}),": Speed up builds"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Matrix testing"}),": Test multiple Go versions"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"contributing-tests",children:"Contributing Tests"}),"\n",(0,i.jsx)(n.p,{children:"When adding new features:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Write tests first"}),": TDD approach"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Cover edge cases"}),": Error conditions, boundary values"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Update existing tests"}),": Don't break backward compatibility"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Document test scenarios"}),": Comments explaining test purpose"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"troubleshooting-test-issues",children:"Troubleshooting Test Issues"}),"\n",(0,i.jsx)(n.h3,{id:"flaky-tests",children:"Flaky Tests"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Race conditions"}),": Use ",(0,i.jsx)(n.code,{children:"-race"})," flag"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Timing issues"}),": Avoid ",(0,i.jsx)(n.code,{children:"time.Sleep()"}),", use channels"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"External dependencies"}),": Mock external APIs"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"common-errors",children:"Common Errors"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Import cycles"}),": Refactor to break cycles"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Missing dependencies"}),": Add to ",(0,i.jsx)(n.code,{children:"go.mod"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Test data"}),": Use consistent test fixtures"]}),"\n"]})]})}function g(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>o});var t=s(6540);const i={},r=t.createContext(i);function l(e){const n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);