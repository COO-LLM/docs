"use strict";(globalThis.webpackChunkcoo_llm_docs=globalThis.webpackChunkcoo_llm_docs||[]).push([[2498],{5238:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>t,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"Intro/Architecture","title":"Architecture","description":"This document describes the high-level architecture of COO-LLM, including component interactions and design decisions.","source":"@site/content/Intro/Architecture.md","sourceDirName":"Intro","slug":"/Intro/Architecture","permalink":"/docs/docs/Intro/Architecture","draft":false,"unlisted":false,"editUrl":"https://github.com/coo-llm/coo-llm-main/tree/main/docs/content/content/Intro/Architecture.md","tags":[{"inline":true,"label":"developer-guide","permalink":"/docs/docs/tags/developer-guide"},{"inline":true,"label":"architecture","permalink":"/docs/docs/tags/architecture"}],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1,"tags":["developer-guide","architecture"]},"sidebar":"tutorialSidebar","previous":{"title":"Providers","permalink":"/docs/docs/Guides/Providers"},"next":{"title":"API Reference","permalink":"/docs/docs/Reference/API"}}');var s=i(4848),l=i(8453);const t={sidebar_position:1,tags:["developer-guide","architecture"]},o="Architecture",d={},c=[{value:"System Overview",id:"system-overview",level:2},{value:"Core Components",id:"core-components",level:2},{value:"API Layer (internal/api)",id:"api-layer-internalapi",level:3},{value:"Load Balancer Engine (internal/balancer)",id:"load-balancer-engine-internalbalancer",level:3},{value:"Provider Registry (internal/provider)",id:"provider-registry-internalprovider",level:3},{value:"Configuration System (internal/config)",id:"configuration-system-internalconfig",level:3},{value:"Storage System (internal/store)",id:"storage-system-internalstore",level:3},{value:"Logging System (internal/log)",id:"logging-system-internallog",level:3},{value:"Design Principles",id:"design-principles",level:2},{value:"Modularity",id:"modularity",level:3},{value:"Extensibility",id:"extensibility",level:3},{value:"Performance",id:"performance",level:3},{value:"Reliability",id:"reliability",level:3},{value:"Observability",id:"observability",level:3},{value:"Data Flow",id:"data-flow",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Security Considerations",id:"security-considerations",level:2}];function a(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",mermaid:"mermaid",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"architecture",children:"Architecture"})}),"\n",(0,s.jsx)(n.p,{children:"This document describes the high-level architecture of COO-LLM, including component interactions and design decisions."}),"\n",(0,s.jsx)(n.h2,{id:"system-overview",children:"System Overview"}),"\n",(0,s.jsx)(n.p,{children:"COO-LLM follows a modular, plugin-based architecture designed for extensibility and maintainability. The system is built in Go and uses a layered architecture pattern."}),"\n",(0,s.jsx)(n.mermaid,{value:"graph LR\n     A[Client Apps] --\x3e B[API Layer]\n     B --\x3e C[Load Balancer]\n     C --\x3e D[Providers]\n     D --\x3e E[LLM APIs]"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Detail:"})}),"\n",(0,s.jsx)(n.mermaid,{value:'flowchart TD\n    classDef client fill:#28a745,color:#fff,stroke:#fff,stroke-width:2px\n    classDef api fill:#28a745,color:#fff,stroke:#fff,stroke-width:2px\n    classDef balancer fill:#dc3545,color:#fff,stroke:#fff,stroke-width:2px\n    classDef provider fill:#ffc107,color:#000,stroke:#000,stroke-width:2px\n    classDef external fill:#007bff,color:#fff,stroke:#fff,stroke-width:2px\n\n    A[Client Applications<br/>OpenAI SDK, LangChain, Custom Clients]:::client\n    A --\x3e B[API Layer<br/>internal/api]:::api\n\n    subgraph B["API Layer  <internal/api >"]\n        B1[OpenAI-Compatible Endpoints<br/>/v1/*<br/>POST /v1/chat/completions<br/>GET /v1/models]:::api\n        B2[Admin API<br/>/admin/v1/*<br/>Configuration management<br/>Provider status]:::api\n    end\n\n    B --\x3e C[Load Balancer<br/>internal/balancer]:::balancer\n\n    subgraph C["Load Balancer  <internal/balancer >"]\n        C1[Selector<br/>selector.go<br/>Model alias resolution<br/>Provider/key selection<br/>Round Robin, Least Loaded, Hybrid]:::balancer\n        C2[Usage Tracking<br/>Request counts, token usage<br/>Errors, latency<br/>Rate limit checking]:::balancer\n    end\n\n    C --\x3e D[Provider Registry<br/>internal/provider]:::provider\n\n    subgraph D["Provider Registry  <internal/provider >"]\n        D1[Provider Interface<br/>interface.go<br/>Generate<ctx, req> method<br/>ListModels <ctx > method]:::provider\n        D2[Provider Implementations<br/>OpenAI  <openai.go ><br/>Gemini  <gemini.go ><br/>Claude  <claude.go ><br/>Custom  <custom.go >]:::provider\n        D3[Registry<br/>registry.go<br/>Load providers from config<br/>Provider registration and lookup]:::provider\n    end\n\n    D --\x3e E[Storage & Observability]:::storage\n\n    subgraph E["Storage & Observability"]\n        E1[Runtime Storage<br/>internal/store<br/>Redis, Memory, HTTP, File]:::storage\n        E2[Configuration<br/>internal/config<br/>YAML parsing with viper<br/>Environment variables<br/>Validation]:::storage\n        E3[Logging<br/>internal/log<br/>Structured JSON  <Zerolog ><br/>File rotation<br/>Prometheus metrics]:::storage\n    end\n\n    E --\x3e F[External LLM Providers]:::external\n\n    subgraph F["External LLM Providers"]\n        F1[OpenAI API<br/>GPT-4, GPT-3.5]:::external\n        F2[Google Gemini API<br/>1.5 Pro, etc.]:::external\n        F3[Anthropic Claude API<br/>Opus, Sonnet]:::external\n        F4[Custom LLM APIs]:::external\n    end'}),"\n",(0,s.jsx)(n.h2,{id:"core-components",children:"Core Components"}),"\n",(0,s.jsx)(n.h3,{id:"api-layer-internalapi",children:"API Layer (internal/api)"}),"\n",(0,s.jsx)(n.p,{children:"The API layer provides OpenAI-compatible REST endpoints using Chi router. It handles:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Request validation and JSON parsing"}),"\n",(0,s.jsx)(n.li,{children:"Authentication via API key middleware"}),"\n",(0,s.jsx)(n.li,{children:"Model alias resolution and provider selection"}),"\n",(0,s.jsx)(n.li,{children:"Response caching (optional)"}),"\n",(0,s.jsx)(n.li,{children:"Retry logic with configurable attempts and timeouts"}),"\n",(0,s.jsx)(n.li,{children:"Usage tracking and metrics collection"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Key Files:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"internal/api/chat_completions.go"})," - Main chat completions handler with retry logic"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"internal/api/models.go"})," - Models endpoint (not implemented yet)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"internal/api/admin.go"})," - Admin endpoints (not implemented yet)"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"load-balancer-engine-internalbalancer",children:"Load Balancer Engine (internal/balancer)"}),"\n",(0,s.jsxs)(n.p,{children:["The core intelligence of COO-LLM implemented in ",(0,s.jsx)(n.code,{children:"selector.go"}),". Responsible for:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Model Resolution"}),': Maps model aliases (e.g., "gpt-4o") to provider',":model"," combinations"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Provider Selection"}),": Chooses optimal provider based on availability"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Key Selection"}),": Implements three algorithms:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Round Robin: Simple cycling through keys"}),"\n",(0,s.jsx)(n.li,{children:"Least Loaded: Selects key with lowest token usage"}),"\n",(0,s.jsx)(n.li,{children:"Hybrid: Weighted scoring of req usage, token usage, errors, latency, cost"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Rate Limiting"}),": Checks per-key limits for requests/minute and tokens/minute"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Usage Tracking"}),": Updates metrics for requests, tokens, errors, latency"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Key Files:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"internal/balancer/selector.go"})," - Main selection logic and algorithms"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"provider-registry-internalprovider",children:"Provider Registry (internal/provider)"}),"\n",(0,s.jsx)(n.p,{children:"Plugin system for LLM providers with clean interfaces:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Provider Interface"}),": ",(0,s.jsx)(n.code,{children:"LLMProvider"})," with ",(0,s.jsx)(n.code,{children:"Generate()"})," and ",(0,s.jsx)(n.code,{children:"ListModels()"})," methods"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Provider Types"}),": OpenAI, Gemini, Claude, Custom"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Registry"}),": Loads providers from config, manages provider instances"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Request/Response Types"}),": Standardized ",(0,s.jsx)(n.code,{children:"LLMRequest"})," and ",(0,s.jsx)(n.code,{children:"LLMResponse"})," structs"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Key Files:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"internal/provider/interface.go"})," - Core interfaces and types"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"internal/provider/registry.go"})," - Provider registration and loading"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"internal/provider/openai.go"})," - OpenAI API implementation"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"internal/provider/gemini.go"})," - Google Gemini implementation"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"internal/provider/claude.go"})," - Anthropic Claude implementation"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"internal/provider/custom.go"})," - Custom provider template"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"configuration-system-internalconfig",children:"Configuration System (internal/config)"}),"\n",(0,s.jsx)(n.p,{children:"YAML-based configuration with viper integration:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Config Structure"}),": ",(0,s.jsx)(n.code,{children:"Config"})," struct with sections for server, logging, storage, providers, etc."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"LLMProviders"}),": New format replacing legacy providers (supports multiple API keys per provider)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Model Aliases"}),": Maps user-friendly names to provider",":model"," pairs"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Policy Config"}),": Load balancing algorithm and hybrid weights"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Validation"}),": Ensures required fields and valid values"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Key Files:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"internal/config/config.go"})," - Main config structs and loading logic"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"internal/config/config_test.go"})," - Configuration tests"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"storage-system-internalstore",children:"Storage System (internal/store)"}),"\n",(0,s.jsx)(n.p,{children:"Runtime storage for metrics and caching:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"RuntimeStore Interface"}),": Methods for usage tracking, caching, sliding windows"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Backends"}),": Redis (production), Memory (dev), HTTP (remote), File"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Usage Metrics"}),": req, tokens, errors, latency per provider/key"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Caching"}),": Optional response caching with TTL"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Key Files:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"internal/store/interface.go"})," - Storage interfaces"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"internal/store/redis.go"})," - Redis implementation"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"internal/store/memory.go"})," - In-memory storage"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"internal/store/http.go"})," - HTTP-based remote storage"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"internal/store/file.go"})," - File-based storage"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"logging-system-internallog",children:"Logging System (internal/log)"}),"\n",(0,s.jsx)(n.p,{children:"Observability with structured logging:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Logger Interface"}),": Request logging with context"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Backends"}),": File with rotation, Prometheus metrics"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Log Entries"}),": Provider, model, latency, tokens, status, errors"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Metrics"}),": Prometheus integration for monitoring"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Key Files:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"internal/log/logger.go"})," - Main logging implementation"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"internal/log/logger_test.go"})," - Logging tests"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"design-principles",children:"Design Principles"}),"\n",(0,s.jsx)(n.h3,{id:"modularity",children:"Modularity"}),"\n",(0,s.jsx)(n.p,{children:"Each component has clear interfaces and responsibilities. Components can be replaced or extended without affecting others."}),"\n",(0,s.jsx)(n.h3,{id:"extensibility",children:"Extensibility"}),"\n",(0,s.jsx)(n.p,{children:"Plugin-based architecture allows adding new providers, storage backends, and logging systems via interfaces."}),"\n",(0,s.jsx)(n.h3,{id:"performance",children:"Performance"}),"\n",(0,s.jsx)(n.p,{children:"Built with Go's concurrency model. Minimal overhead in request routing. Efficient data structures for metrics tracking."}),"\n",(0,s.jsx)(n.h3,{id:"reliability",children:"Reliability"}),"\n",(0,s.jsx)(n.p,{children:"Comprehensive error handling, retries, and fallback mechanisms. Health checks and monitoring."}),"\n",(0,s.jsx)(n.h3,{id:"observability",children:"Observability"}),"\n",(0,s.jsx)(n.p,{children:"Rich metrics, structured logging, and admin APIs for debugging and monitoring."}),"\n",(0,s.jsx)(n.h2,{id:"data-flow",children:"Data Flow"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Request Reception"}),": ",(0,s.jsx)(n.code,{children:"chat_completions.go"})," receives POST /v1/chat/completions"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Authentication"}),": ",(0,s.jsx)(n.code,{children:"AuthMiddleware"})," validates Bearer token against ",(0,s.jsx)(n.code,{children:"api_keys"})," config"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Model Resolution"}),": ",(0,s.jsx)(n.code,{children:"GetProviderFromModel()"})," maps model alias to provider ID using ",(0,s.jsx)(n.code,{children:"model_aliases"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Provider Selection"}),": ",(0,s.jsx)(n.code,{children:"selector.SelectBest()"})," resolves model to provider",":model",", selects provider"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Key Selection"}),": ",(0,s.jsx)(n.code,{children:"selector.selectKey()"})," chooses optimal API key using configured algorithm:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Round Robin: Cycle through available keys"}),"\n",(0,s.jsx)(n.li,{children:"Least Loaded: Select key with lowest token usage"}),"\n",(0,s.jsx)(n.li,{children:"Hybrid: Calculate weighted score (req, token, error, latency, cost)"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Rate Limit Check"}),": Verify key hasn't exceeded req/min or tokens/min limits"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Request Execution"}),": Provider's ",(0,s.jsx)(n.code,{children:"Generate()"})," method makes external API call"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Retry Logic"}),": On failure, retry up to ",(0,s.jsx)(n.code,{children:"max_attempts"})," with ",(0,s.jsx)(n.code,{children:"interval"})," delays"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Response Processing"}),": Parse LLM response, extract token counts and finish reason"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Usage Tracking"}),": Update storage with req, input_tokens, output_tokens, latency, errors"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Caching"}),": Optionally cache response if enabled and prompt matches"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Logging"}),": Record request details via ",(0,s.jsx)(n.code,{children:"logger.LogRequest()"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Response"}),": Return OpenAI-formatted JSON response to client"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,s.jsx)(n.p,{children:"Configuration is centralized in YAML format with support for:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Environment variable substitution"}),"\n",(0,s.jsx)(n.li,{children:"Hot-reload capabilities"}),"\n",(0,s.jsx)(n.li,{children:"Validation and defaults"}),"\n",(0,s.jsx)(n.li,{children:"Hierarchical overrides"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["See ",(0,s.jsx)(n.a,{href:"/docs/docs/Guides/Configuration",children:"Configuration"})," for details."]}),"\n",(0,s.jsx)(n.h2,{id:"security-considerations",children:"Security Considerations"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"API key encryption at rest"}),"\n",(0,s.jsx)(n.li,{children:"Request rate limiting"}),"\n",(0,s.jsx)(n.li,{children:"Input validation and sanitization"}),"\n",(0,s.jsx)(n.li,{children:"Secure communication with external providers"}),"\n",(0,s.jsx)(n.li,{children:"Audit logging for compliance"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>t,x:()=>o});var r=i(6540);const s={},l=r.createContext(s);function t(e){const n=r.useContext(l);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:t(e.components),r.createElement(l.Provider,{value:n},e.children)}}}]);