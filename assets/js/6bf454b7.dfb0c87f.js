"use strict";(globalThis.webpackChunkcoo_llm_docs=globalThis.webpackChunkcoo_llm_docs||[]).push([[391],{5544:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>l,toc:()=>g});var a=t(8168),i=(t(6540),t(5680));const r={sidebar_position:6,tags:["developer-guide","contributing"]},o="Contributing",l={unversionedId:"Contributing/Guidelines",id:"Contributing/Guidelines",title:"Contributing",description:"Thank you for your interest in contributing to COO-LLM! This document provides guidelines and information for contributors.",source:"@site/docs/Contributing/Guidelines.md",sourceDirName:"Contributing",slug:"/Contributing/Guidelines",permalink:"/coo-llm-main/docs/Contributing/Guidelines",draft:!1,editUrl:"https://github.com/your-org/coo-llm/tree/main/docs/docs/docs/Contributing/Guidelines.md",tags:[{label:"developer-guide",permalink:"/coo-llm-main/docs/tags/developer-guide"},{label:"contributing",permalink:"/coo-llm-main/docs/tags/contributing"}],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6,tags:["developer-guide","contributing"]},sidebar:"tutorialSidebar",previous:{title:"Logging",permalink:"/coo-llm-main/docs/Reference/Logging"},next:{title:"Changelog",permalink:"/coo-llm-main/docs/Contributing/Changelog"}},s={},g=[{value:"Code of Conduct",id:"code-of-conduct",level:2},{value:"Getting Started",id:"getting-started",level:2},{value:"Development Environment",id:"development-environment",level:3},{value:"Project Structure",id:"project-structure",level:3},{value:"Development Workflow",id:"development-workflow",level:2},{value:"1. Choose an Issue",id:"1-choose-an-issue",level:3},{value:"2. Create a Branch",id:"2-create-a-branch",level:3},{value:"3. Make Changes",id:"3-make-changes",level:3},{value:"4. Test Your Changes",id:"4-test-your-changes",level:3},{value:"5. Submit a Pull Request",id:"5-submit-a-pull-request",level:3},{value:"Coding Standards",id:"coding-standards",level:2},{value:"Go Code Style",id:"go-code-style",level:3},{value:"Naming Conventions",id:"naming-conventions",level:3},{value:"Code Organization",id:"code-organization",level:3},{value:"Error Handling",id:"error-handling",level:3},{value:"Testing",id:"testing",level:2},{value:"Unit Tests",id:"unit-tests",level:3},{value:"Integration Tests",id:"integration-tests",level:3},{value:"Test Coverage",id:"test-coverage",level:3},{value:"Documentation",id:"documentation",level:2},{value:"Code Documentation",id:"code-documentation",level:3},{value:"API Documentation",id:"api-documentation",level:3},{value:"README Updates",id:"readme-updates",level:3},{value:"Adding New Providers",id:"adding-new-providers",level:2},{value:"Adding Storage Backends",id:"adding-storage-backends",level:2},{value:"Pull Request Process",id:"pull-request-process",level:2},{value:"Before Submitting",id:"before-submitting",level:3},{value:"PR Template",id:"pr-template",level:3},{value:"Review Process",id:"review-process",level:3},{value:"Release Process",id:"release-process",level:2},{value:"Versioning",id:"versioning",level:3},{value:"Release Checklist",id:"release-checklist",level:3},{value:"Community",id:"community",level:2},{value:"Communication",id:"communication",level:3},{value:"Getting Help",id:"getting-help",level:3},{value:"Recognition",id:"recognition",level:3},{value:"License",id:"license",level:2}],u={toc:g},c="wrapper";function p({components:e,...n}){return(0,i.yg)(c,(0,a.A)({},u,n,{components:e,mdxType:"MDXLayout"}),(0,i.yg)("h1",{id:"contributing"},"Contributing"),(0,i.yg)("p",null,"Thank you for your interest in contributing to COO-LLM! This document provides guidelines and information for contributors."),(0,i.yg)("h2",{id:"code-of-conduct"},"Code of Conduct"),(0,i.yg)("p",null,"This project follows a code of conduct to ensure a welcoming environment for all contributors. By participating, you agree to:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Be respectful and inclusive"),(0,i.yg)("li",{parentName:"ul"},"Focus on constructive feedback"),(0,i.yg)("li",{parentName:"ul"},"Accept responsibility for mistakes"),(0,i.yg)("li",{parentName:"ul"},"Show empathy towards other contributors"),(0,i.yg)("li",{parentName:"ul"},"Help create a positive community")),(0,i.yg)("h2",{id:"getting-started"},"Getting Started"),(0,i.yg)("h3",{id:"development-environment"},"Development Environment"),(0,i.yg)("ol",null,(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("p",{parentName:"li"},(0,i.yg)("strong",{parentName:"p"},"Prerequisites:")),(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},"Go 1.21 or later"),(0,i.yg)("li",{parentName:"ul"},"Docker and Docker Compose"),(0,i.yg)("li",{parentName:"ul"},"Git"),(0,i.yg)("li",{parentName:"ul"},"Make"))),(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("p",{parentName:"li"},(0,i.yg)("strong",{parentName:"p"},"Clone the repository:")),(0,i.yg)("pre",{parentName:"li"},(0,i.yg)("code",{parentName:"pre",className:"language-bash"},"git clone https://github.com/your-org/coo-llm.git\ncd coo-llm\n"))),(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("p",{parentName:"li"},(0,i.yg)("strong",{parentName:"p"},"Install dependencies:")),(0,i.yg)("pre",{parentName:"li"},(0,i.yg)("code",{parentName:"pre",className:"language-bash"},"go mod download\n"))),(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("p",{parentName:"li"},(0,i.yg)("strong",{parentName:"p"},"Run tests:")),(0,i.yg)("pre",{parentName:"li"},(0,i.yg)("code",{parentName:"pre",className:"language-bash"},"make test\n"))),(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("p",{parentName:"li"},(0,i.yg)("strong",{parentName:"p"},"Build and run:")),(0,i.yg)("pre",{parentName:"li"},(0,i.yg)("code",{parentName:"pre",className:"language-bash"},"make build\nmake run\n")))),(0,i.yg)("h3",{id:"project-structure"},"Project Structure"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},"coo-llm/\n\u251c\u2500\u2500 cmd/                    # Application entrypoints\n\u2502   \u2514\u2500\u2500 coo-llm/       # Main application\n\u251c\u2500\u2500 internal/              # Private application code\n\u2502   \u251c\u2500\u2500 api/              # HTTP API handlers\n\u2502   \u251c\u2500\u2500 balancer/         # Load balancing logic\n\u2502   \u251c\u2500\u2500 config/           # Configuration management\n\u2502   \u251c\u2500\u2500 log/              # Logging system\n\u2502   \u251c\u2500\u2500 provider/         # LLM provider adapters\n\u2502   \u2514\u2500\u2500 store/            # Storage backends\n\u251c\u2500\u2500 pkg/                   # Public packages\n\u251c\u2500\u2500 configs/               # Configuration files\n\u251c\u2500\u2500 docs/                  # Documentation site\n\u251c\u2500\u2500 test/                  # Integration tests\n\u251c\u2500\u2500 docker-compose.yml     # Docker setup\n\u251c\u2500\u2500 Dockerfile            # Container build\n\u251c\u2500\u2500 Makefile              # Build automation\n\u251c\u2500\u2500 go.mod                # Go modules\n\u2514\u2500\u2500 README.md             # Project overview\n")),(0,i.yg)("h2",{id:"development-workflow"},"Development Workflow"),(0,i.yg)("h3",{id:"1-choose-an-issue"},"1. Choose an Issue"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Check ",(0,i.yg)("a",{parentName:"li",href:"https://github.com/your-org/coo-llm/issues"},"GitHub Issues")," for open tasks"),(0,i.yg)("li",{parentName:"ul"},"Look for issues labeled ",(0,i.yg)("inlineCode",{parentName:"li"},"good first issue")," or ",(0,i.yg)("inlineCode",{parentName:"li"},"help wanted")),(0,i.yg)("li",{parentName:"ul"},"Comment on the issue to indicate you're working on it")),(0,i.yg)("h3",{id:"2-create-a-branch"},"2. Create a Branch"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-bash"},"git checkout -b feature/your-feature-name\n# or\ngit checkout -b fix/issue-number-description\n")),(0,i.yg)("h3",{id:"3-make-changes"},"3. Make Changes"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Write clear, concise commit messages"),(0,i.yg)("li",{parentName:"ul"},"Follow the existing code style"),(0,i.yg)("li",{parentName:"ul"},"Add tests for new functionality"),(0,i.yg)("li",{parentName:"ul"},"Update documentation as needed")),(0,i.yg)("h3",{id:"4-test-your-changes"},"4. Test Your Changes"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-bash"},"# Run unit tests\ngo test ./...\n\n# Run integration tests\ngo test ./test/...\n\n# Run linting\nmake lint\n\n# Build the project\nmake build\n")),(0,i.yg)("h3",{id:"5-submit-a-pull-request"},"5. Submit a Pull Request"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Push your branch to GitHub"),(0,i.yg)("li",{parentName:"ul"},"Create a pull request with a clear description"),(0,i.yg)("li",{parentName:"ul"},"Reference any related issues"),(0,i.yg)("li",{parentName:"ul"},"Wait for review and address feedback")),(0,i.yg)("h2",{id:"coding-standards"},"Coding Standards"),(0,i.yg)("h3",{id:"go-code-style"},"Go Code Style"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Follow standard Go formatting (",(0,i.yg)("inlineCode",{parentName:"li"},"go fmt"),")"),(0,i.yg)("li",{parentName:"ul"},"Use ",(0,i.yg)("inlineCode",{parentName:"li"},"gofmt -s")," for additional simplifications"),(0,i.yg)("li",{parentName:"ul"},"Run ",(0,i.yg)("inlineCode",{parentName:"li"},"go vet")," to check for common mistakes"),(0,i.yg)("li",{parentName:"ul"},"Use ",(0,i.yg)("inlineCode",{parentName:"li"},"golint")," for style issues")),(0,i.yg)("h3",{id:"naming-conventions"},"Naming Conventions"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Use descriptive names for variables and functions"),(0,i.yg)("li",{parentName:"ul"},"Follow Go naming conventions (camelCase for private, PascalCase for public)"),(0,i.yg)("li",{parentName:"ul"},"Use consistent naming patterns")),(0,i.yg)("h3",{id:"code-organization"},"Code Organization"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Keep functions small and focused"),(0,i.yg)("li",{parentName:"ul"},"Use interfaces for abstraction"),(0,i.yg)("li",{parentName:"ul"},"Separate concerns properly"),(0,i.yg)("li",{parentName:"ul"},"Add comments for complex logic")),(0,i.yg)("h3",{id:"error-handling"},"Error Handling"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Return errors instead of panicking"),(0,i.yg)("li",{parentName:"ul"},"Use error wrapping for context"),(0,i.yg)("li",{parentName:"ul"},"Handle errors at appropriate levels"),(0,i.yg)("li",{parentName:"ul"},"Log errors with sufficient context")),(0,i.yg)("h2",{id:"testing"},"Testing"),(0,i.yg)("h3",{id:"unit-tests"},"Unit Tests"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Place test files alongside source code (",(0,i.yg)("inlineCode",{parentName:"li"},"*_test.go"),")"),(0,i.yg)("li",{parentName:"ul"},"Use table-driven tests for multiple test cases"),(0,i.yg)("li",{parentName:"ul"},"Mock external dependencies"),(0,i.yg)("li",{parentName:"ul"},"Aim for high coverage (>80%)")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-go"},'func TestFunction(t *testing.T) {\n    tests := []struct {\n        name     string\n        input    string\n        expected string\n        wantErr  bool\n    }{\n        {"valid input", "hello", "HELLO", false},\n        {"empty input", "", "", true},\n    }\n\n    for _, tt := range tests {\n        t.Run(tt.name, func(t *testing.T) {\n            result, err := Function(tt.input)\n            if tt.wantErr {\n                assert.Error(t, err)\n            } else {\n                assert.NoError(t, err)\n                assert.Equal(t, tt.expected, result)\n            }\n        })\n    }\n}\n')),(0,i.yg)("h3",{id:"integration-tests"},"Integration Tests"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Place integration tests in ",(0,i.yg)("inlineCode",{parentName:"li"},"test/")," directory"),(0,i.yg)("li",{parentName:"ul"},"Test complete workflows"),(0,i.yg)("li",{parentName:"ul"},"Use real dependencies where possible"),(0,i.yg)("li",{parentName:"ul"},"Clean up resources after tests")),(0,i.yg)("h3",{id:"test-coverage"},"Test Coverage"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-bash"},"# Generate coverage report\ngo test -coverprofile=coverage.out ./...\n\n# View coverage in browser\ngo tool cover -html=coverage.out\n\n# Coverage summary\ngo tool cover -func=coverage.out\n")),(0,i.yg)("h2",{id:"documentation"},"Documentation"),(0,i.yg)("h3",{id:"code-documentation"},"Code Documentation"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Add package comments for exported packages"),(0,i.yg)("li",{parentName:"ul"},"Document exported functions, types, and methods"),(0,i.yg)("li",{parentName:"ul"},"Use examples in documentation")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-go"},"// Package provider contains LLM provider implementations.\n//\n// Example:\n//\n//  p, err := provider.NewOpenAIProvider(config)\n//  if err != nil {\n//      log.Fatal(err)\n//  }\n//\n//  resp, err := p.Generate(ctx, req)\npackage provider\n\n// Generate sends a request to the LLM provider and returns the response.\n// It handles authentication, request formatting, and response parsing.\nfunc (p *OpenAIProvider) Generate(ctx context.Context, req *Request) (*Response, error) {\n    // implementation\n}\n")),(0,i.yg)("h3",{id:"api-documentation"},"API Documentation"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Document REST API endpoints"),(0,i.yg)("li",{parentName:"ul"},"Include request/response examples"),(0,i.yg)("li",{parentName:"ul"},"Specify error conditions")),(0,i.yg)("h3",{id:"readme-updates"},"README Updates"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Update README.md for significant changes"),(0,i.yg)("li",{parentName:"ul"},"Add examples for new features"),(0,i.yg)("li",{parentName:"ul"},"Update installation instructions")),(0,i.yg)("h2",{id:"adding-new-providers"},"Adding New Providers"),(0,i.yg)("ol",null,(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("strong",{parentName:"li"},"Implement the Provider interface:"))),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-go"},"type CustomProvider struct {\n    cfg *config.Provider\n}\n\nfunc NewCustomProvider(cfg *config.Provider) *CustomProvider {\n    return &CustomProvider{cfg: cfg}\n}\n\nfunc (p *CustomProvider) Name() string {\n    return p.cfg.ID\n}\n\nfunc (p *CustomProvider) Generate(ctx context.Context, req *Request) (*Response, error) {\n    // Implementation\n}\n\nfunc (p *CustomProvider) ListModels(ctx context.Context) ([]string, error) {\n    // Implementation\n}\n")),(0,i.yg)("ol",{start:2},(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("strong",{parentName:"li"},"Register in the provider registry:"))),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-go"},'func (r *Registry) LoadFromConfig(cfg *config.Config) error {\n    // ... existing providers ...\n    case "custom":\n        p = NewCustomProvider(&pCfg)\n    // ...\n}\n')),(0,i.yg)("ol",{start:3},(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("strong",{parentName:"li"},"Add configuration example:"))),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-yaml"},'providers:\n  - id: custom\n    name: "Custom Provider"\n    base_url: "https://api.custom.com/v1"\n    keys:\n      - secret: "${CUSTOM_API_KEY}"\n        pricing:\n          input_token_cost: 0.001\n          output_token_cost: 0.002\n')),(0,i.yg)("ol",{start:4},(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("strong",{parentName:"li"},"Add tests and documentation"))),(0,i.yg)("h2",{id:"adding-storage-backends"},"Adding Storage Backends"),(0,i.yg)("ol",null,(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("strong",{parentName:"li"},"Implement the storage interface:"))),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-go"},"type CustomStore struct {\n    // fields\n}\n\nfunc (s *CustomStore) GetUsage(provider, keyID, metric string) (float64, error) {\n    // Implementation\n}\n\nfunc (s *CustomStore) SetUsage(provider, keyID, metric string, value float64) error {\n    // Implementation\n}\n\nfunc (s *CustomStore) IncrementUsage(provider, keyID, metric string, delta float64) error {\n    // Implementation\n}\n")),(0,i.yg)("ol",{start:2},(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("strong",{parentName:"li"},"Add to main application:"))),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-go"},'func initStorage(cfg *config.Config) store.RuntimeStore {\n    switch cfg.Storage.Runtime.Type {\n    case "custom":\n        return NewCustomStore(cfg.Storage.Runtime)\n    // ... other cases ...\n    }\n}\n')),(0,i.yg)("h2",{id:"pull-request-process"},"Pull Request Process"),(0,i.yg)("h3",{id:"before-submitting"},"Before Submitting"),(0,i.yg)("ul",{className:"contains-task-list"},(0,i.yg)("li",{parentName:"ul",className:"task-list-item"},(0,i.yg)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","Tests pass (",(0,i.yg)("inlineCode",{parentName:"li"},"make test"),")"),(0,i.yg)("li",{parentName:"ul",className:"task-list-item"},(0,i.yg)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","Code is formatted (",(0,i.yg)("inlineCode",{parentName:"li"},"go fmt"),")"),(0,i.yg)("li",{parentName:"ul",className:"task-list-item"},(0,i.yg)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","No linting errors (",(0,i.yg)("inlineCode",{parentName:"li"},"make lint"),")"),(0,i.yg)("li",{parentName:"ul",className:"task-list-item"},(0,i.yg)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","Documentation updated"),(0,i.yg)("li",{parentName:"ul",className:"task-list-item"},(0,i.yg)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","Commit messages are clear")),(0,i.yg)("h3",{id:"pr-template"},"PR Template"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-markdown"},"## Description\nBrief description of the changes.\n\n## Type of Change\n- [ ] Bug fix\n- [ ] New feature\n- [ ] Breaking change\n- [ ] Documentation update\n\n## Testing\n- [ ] Unit tests added/updated\n- [ ] Integration tests added/updated\n- [ ] Manual testing performed\n\n## Checklist\n- [ ] Code follows project style\n- [ ] Documentation updated\n- [ ] Tests pass\n- [ ] No breaking changes\n")),(0,i.yg)("h3",{id:"review-process"},"Review Process"),(0,i.yg)("ol",null,(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("strong",{parentName:"li"},"Automated Checks:")," CI runs tests and linting"),(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("strong",{parentName:"li"},"Code Review:")," Maintainers review code changes"),(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("strong",{parentName:"li"},"Testing:")," Additional testing may be requested"),(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("strong",{parentName:"li"},"Approval:")," PR approved and merged")),(0,i.yg)("h2",{id:"release-process"},"Release Process"),(0,i.yg)("h3",{id:"versioning"},"Versioning"),(0,i.yg)("p",null,"COO-LLM follows ",(0,i.yg)("a",{parentName:"p",href:"https://semver.org/"},"Semantic Versioning"),":"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"MAJOR:")," Breaking changes"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"MINOR:")," New features"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"PATCH:")," Bug fixes")),(0,i.yg)("h3",{id:"release-checklist"},"Release Checklist"),(0,i.yg)("ul",{className:"contains-task-list"},(0,i.yg)("li",{parentName:"ul",className:"task-list-item"},(0,i.yg)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","Update version in code"),(0,i.yg)("li",{parentName:"ul",className:"task-list-item"},(0,i.yg)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","Update CHANGELOG.md"),(0,i.yg)("li",{parentName:"ul",className:"task-list-item"},(0,i.yg)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","Create git tag"),(0,i.yg)("li",{parentName:"ul",className:"task-list-item"},(0,i.yg)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","Build and test release artifacts"),(0,i.yg)("li",{parentName:"ul",className:"task-list-item"},(0,i.yg)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","Publish to package registry"),(0,i.yg)("li",{parentName:"ul",className:"task-list-item"},(0,i.yg)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","Update documentation")),(0,i.yg)("h2",{id:"community"},"Community"),(0,i.yg)("h3",{id:"communication"},"Communication"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"GitHub Issues:")," Bug reports and feature requests"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"Discussions:")," General questions and ideas"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"Pull Requests:")," Code contributions")),(0,i.yg)("h3",{id:"getting-help"},"Getting Help"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Check existing issues and documentation"),(0,i.yg)("li",{parentName:"ul"},"Ask questions in GitHub Discussions"),(0,i.yg)("li",{parentName:"ul"},"Join our community chat (if available)")),(0,i.yg)("h3",{id:"recognition"},"Recognition"),(0,i.yg)("p",null,"Contributors are recognized in:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"CHANGELOG.md for releases"),(0,i.yg)("li",{parentName:"ul"},"GitHub contributor statistics"),(0,i.yg)("li",{parentName:"ul"},"Release notes")),(0,i.yg)("h2",{id:"license"},"License"),(0,i.yg)("p",null,"By contributing to COO-LLM, you agree that your contributions will be licensed under the same license as the project (MIT License)."))}p.isMDXComponent=!0},5680:(e,n,t)=>{t.d(n,{xA:()=>u,yg:()=>d});var a=t(6540);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter(function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable})),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach(function(n){i(e,n,t[n])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach(function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})}return e}function l(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=a.createContext({}),g=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=g(e.components);return a.createElement(s.Provider,{value:n},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef(function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=g(t),m=i,d=c["".concat(s,".").concat(m)]||c[m]||p[m]||r;return t?a.createElement(d,o(o({ref:n},u),{},{components:t})):a.createElement(d,o({ref:n},u))});function d(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,o=new Array(r);o[0]=m;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[c]="string"==typeof e?e:i,o[1]=l;for(var g=2;g<r;g++)o[g]=t[g];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"}}]);